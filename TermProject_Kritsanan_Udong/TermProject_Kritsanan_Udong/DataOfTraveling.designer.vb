'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Database1")>  _
Partial Public Class DataOfTravelingDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertTradition(instance As Tradition)
    End Sub
  Partial Private Sub UpdateTradition(instance As Tradition)
    End Sub
  Partial Private Sub DeleteTradition(instance As Tradition)
    End Sub
  Partial Private Sub InsertProduct(instance As Product)
    End Sub
  Partial Private Sub UpdateProduct(instance As Product)
    End Sub
  Partial Private Sub DeleteProduct(instance As Product)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("Database1ConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Traditions() As System.Data.Linq.Table(Of Tradition)
		Get
			Return Me.GetTable(Of Tradition)
		End Get
	End Property
	
	Public ReadOnly Property Products() As System.Data.Linq.Table(Of Product)
		Get
			Return Me.GetTable(Of Product)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Tradition")>  _
Partial Public Class Tradition
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Tradition_ID As Integer
	
	Private _Tradition_Name As String
	
	Private _Tradition_Details As String
	
	Private _Tradition_Image As String
	
	Private _Tradition_Date As String
	
	Private _Tradition_Where As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTradition_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTradition_IDChanged()
    End Sub
    Partial Private Sub OnTradition_NameChanging(value As String)
    End Sub
    Partial Private Sub OnTradition_NameChanged()
    End Sub
    Partial Private Sub OnTradition_DetailsChanging(value As String)
    End Sub
    Partial Private Sub OnTradition_DetailsChanged()
    End Sub
    Partial Private Sub OnTradition_ImageChanging(value As String)
    End Sub
    Partial Private Sub OnTradition_ImageChanged()
    End Sub
    Partial Private Sub OnTradition_DateChanging(value As String)
    End Sub
    Partial Private Sub OnTradition_DateChanged()
    End Sub
    Partial Private Sub OnTradition_WhereChanging(value As String)
    End Sub
    Partial Private Sub OnTradition_WhereChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tradition_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Tradition_ID() As Integer
		Get
			Return Me._Tradition_ID
		End Get
		Set
			If ((Me._Tradition_ID = value)  _
						= false) Then
				Me.OnTradition_IDChanging(value)
				Me.SendPropertyChanging
				Me._Tradition_ID = value
				Me.SendPropertyChanged("Tradition_ID")
				Me.OnTradition_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tradition_Name", DbType:="NVarChar(50)")>  _
	Public Property Tradition_Name() As String
		Get
			Return Me._Tradition_Name
		End Get
		Set
			If (String.Equals(Me._Tradition_Name, value) = false) Then
				Me.OnTradition_NameChanging(value)
				Me.SendPropertyChanging
				Me._Tradition_Name = value
				Me.SendPropertyChanged("Tradition_Name")
				Me.OnTradition_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tradition_Details", DbType:="NVarChar(MAX)")>  _
	Public Property Tradition_Details() As String
		Get
			Return Me._Tradition_Details
		End Get
		Set
			If (String.Equals(Me._Tradition_Details, value) = false) Then
				Me.OnTradition_DetailsChanging(value)
				Me.SendPropertyChanging
				Me._Tradition_Details = value
				Me.SendPropertyChanged("Tradition_Details")
				Me.OnTradition_DetailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tradition_Image", DbType:="NVarChar(MAX)")>  _
	Public Property Tradition_Image() As String
		Get
			Return Me._Tradition_Image
		End Get
		Set
			If (String.Equals(Me._Tradition_Image, value) = false) Then
				Me.OnTradition_ImageChanging(value)
				Me.SendPropertyChanging
				Me._Tradition_Image = value
				Me.SendPropertyChanged("Tradition_Image")
				Me.OnTradition_ImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tradition_Date", DbType:="NVarChar(50)")>  _
	Public Property Tradition_Date() As String
		Get
			Return Me._Tradition_Date
		End Get
		Set
			If (String.Equals(Me._Tradition_Date, value) = false) Then
				Me.OnTradition_DateChanging(value)
				Me.SendPropertyChanging
				Me._Tradition_Date = value
				Me.SendPropertyChanged("Tradition_Date")
				Me.OnTradition_DateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tradition_Where", DbType:="NVarChar(MAX)")>  _
	Public Property Tradition_Where() As String
		Get
			Return Me._Tradition_Where
		End Get
		Set
			If (String.Equals(Me._Tradition_Where, value) = false) Then
				Me.OnTradition_WhereChanging(value)
				Me.SendPropertyChanging
				Me._Tradition_Where = value
				Me.SendPropertyChanged("Tradition_Where")
				Me.OnTradition_WhereChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Product")>  _
Partial Public Class Product
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Product_ID As Integer
	
	Private _Product_Name As String
	
	Private _Product_Details_C1 As String
	
	Private _Product_Details_C2 As String
	
	Private _Product_Details_C3 As String
	
	Private _Product_Contact As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProduct_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProduct_IDChanged()
    End Sub
    Partial Private Sub OnProduct_NameChanging(value As String)
    End Sub
    Partial Private Sub OnProduct_NameChanged()
    End Sub
    Partial Private Sub OnProduct_Details_C1Changing(value As String)
    End Sub
    Partial Private Sub OnProduct_Details_C1Changed()
    End Sub
    Partial Private Sub OnProduct_Details_C2Changing(value As String)
    End Sub
    Partial Private Sub OnProduct_Details_C2Changed()
    End Sub
    Partial Private Sub OnProduct_Details_C3Changing(value As String)
    End Sub
    Partial Private Sub OnProduct_Details_C3Changed()
    End Sub
    Partial Private Sub OnProduct_ContactChanging(value As String)
    End Sub
    Partial Private Sub OnProduct_ContactChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Product_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Product_ID() As Integer
		Get
			Return Me._Product_ID
		End Get
		Set
			If ((Me._Product_ID = value)  _
						= false) Then
				Me.OnProduct_IDChanging(value)
				Me.SendPropertyChanging
				Me._Product_ID = value
				Me.SendPropertyChanged("Product_ID")
				Me.OnProduct_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Product_Name", DbType:="NVarChar(50)")>  _
	Public Property Product_Name() As String
		Get
			Return Me._Product_Name
		End Get
		Set
			If (String.Equals(Me._Product_Name, value) = false) Then
				Me.OnProduct_NameChanging(value)
				Me.SendPropertyChanging
				Me._Product_Name = value
				Me.SendPropertyChanged("Product_Name")
				Me.OnProduct_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Product_Details_C1", DbType:="NVarChar(MAX)")>  _
	Public Property Product_Details_C1() As String
		Get
			Return Me._Product_Details_C1
		End Get
		Set
			If (String.Equals(Me._Product_Details_C1, value) = false) Then
				Me.OnProduct_Details_C1Changing(value)
				Me.SendPropertyChanging
				Me._Product_Details_C1 = value
				Me.SendPropertyChanged("Product_Details_C1")
				Me.OnProduct_Details_C1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Product_Details_C2", DbType:="NVarChar(MAX)")>  _
	Public Property Product_Details_C2() As String
		Get
			Return Me._Product_Details_C2
		End Get
		Set
			If (String.Equals(Me._Product_Details_C2, value) = false) Then
				Me.OnProduct_Details_C2Changing(value)
				Me.SendPropertyChanging
				Me._Product_Details_C2 = value
				Me.SendPropertyChanged("Product_Details_C2")
				Me.OnProduct_Details_C2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Product_Details_C3", DbType:="NVarChar(MAX)")>  _
	Public Property Product_Details_C3() As String
		Get
			Return Me._Product_Details_C3
		End Get
		Set
			If (String.Equals(Me._Product_Details_C3, value) = false) Then
				Me.OnProduct_Details_C3Changing(value)
				Me.SendPropertyChanging
				Me._Product_Details_C3 = value
				Me.SendPropertyChanged("Product_Details_C3")
				Me.OnProduct_Details_C3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Product_Contact", DbType:="NVarChar(MAX)")>  _
	Public Property Product_Contact() As String
		Get
			Return Me._Product_Contact
		End Get
		Set
			If (String.Equals(Me._Product_Contact, value) = false) Then
				Me.OnProduct_ContactChanging(value)
				Me.SendPropertyChanging
				Me._Product_Contact = value
				Me.SendPropertyChanged("Product_Contact")
				Me.OnProduct_ContactChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
