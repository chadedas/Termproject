'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Database1")>  _
Partial Public Class HomeClassDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertHome_Traveling(instance As Home_Traveling)
    End Sub
  Partial Private Sub UpdateHome_Traveling(instance As Home_Traveling)
    End Sub
  Partial Private Sub DeleteHome_Traveling(instance As Home_Traveling)
    End Sub
  Partial Private Sub InsertHome_History(instance As Home_History)
    End Sub
  Partial Private Sub UpdateHome_History(instance As Home_History)
    End Sub
  Partial Private Sub DeleteHome_History(instance As Home_History)
    End Sub
  Partial Private Sub InsertHome_Product(instance As Home_Product)
    End Sub
  Partial Private Sub UpdateHome_Product(instance As Home_Product)
    End Sub
  Partial Private Sub DeleteHome_Product(instance As Home_Product)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("Database1ConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Home_Travelings() As System.Data.Linq.Table(Of Home_Traveling)
		Get
			Return Me.GetTable(Of Home_Traveling)
		End Get
	End Property
	
	Public ReadOnly Property Home_Histories() As System.Data.Linq.Table(Of Home_History)
		Get
			Return Me.GetTable(Of Home_History)
		End Get
	End Property
	
	Public ReadOnly Property Home_Products() As System.Data.Linq.Table(Of Home_Product)
		Get
			Return Me.GetTable(Of Home_Product)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Home_Traveling")>  _
Partial Public Class Home_Traveling
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Travel_ID As Integer
	
	Private _Travel_Name As String
	
	Private _Travel_Details As String
	
	Private _Travel_Link As String
	
	Private _Travel_Image As String
	
	Private _Travel_Slide As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTravel_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTravel_IDChanged()
    End Sub
    Partial Private Sub OnTravel_NameChanging(value As String)
    End Sub
    Partial Private Sub OnTravel_NameChanged()
    End Sub
    Partial Private Sub OnTravel_DetailsChanging(value As String)
    End Sub
    Partial Private Sub OnTravel_DetailsChanged()
    End Sub
    Partial Private Sub OnTravel_LinkChanging(value As String)
    End Sub
    Partial Private Sub OnTravel_LinkChanged()
    End Sub
    Partial Private Sub OnTravel_ImageChanging(value As String)
    End Sub
    Partial Private Sub OnTravel_ImageChanged()
    End Sub
    Partial Private Sub OnTravel_SlideChanging(value As String)
    End Sub
    Partial Private Sub OnTravel_SlideChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Travel_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Travel_ID() As Integer
		Get
			Return Me._Travel_ID
		End Get
		Set
			If ((Me._Travel_ID = value)  _
						= false) Then
				Me.OnTravel_IDChanging(value)
				Me.SendPropertyChanging
				Me._Travel_ID = value
				Me.SendPropertyChanged("Travel_ID")
				Me.OnTravel_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Travel_Name", DbType:="NVarChar(50)")>  _
	Public Property Travel_Name() As String
		Get
			Return Me._Travel_Name
		End Get
		Set
			If (String.Equals(Me._Travel_Name, value) = false) Then
				Me.OnTravel_NameChanging(value)
				Me.SendPropertyChanging
				Me._Travel_Name = value
				Me.SendPropertyChanged("Travel_Name")
				Me.OnTravel_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Travel_Details", DbType:="NVarChar(MAX)")>  _
	Public Property Travel_Details() As String
		Get
			Return Me._Travel_Details
		End Get
		Set
			If (String.Equals(Me._Travel_Details, value) = false) Then
				Me.OnTravel_DetailsChanging(value)
				Me.SendPropertyChanging
				Me._Travel_Details = value
				Me.SendPropertyChanged("Travel_Details")
				Me.OnTravel_DetailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Travel_Link", DbType:="NVarChar(MAX)")>  _
	Public Property Travel_Link() As String
		Get
			Return Me._Travel_Link
		End Get
		Set
			If (String.Equals(Me._Travel_Link, value) = false) Then
				Me.OnTravel_LinkChanging(value)
				Me.SendPropertyChanging
				Me._Travel_Link = value
				Me.SendPropertyChanged("Travel_Link")
				Me.OnTravel_LinkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Travel_Image", DbType:="NVarChar(MAX)")>  _
	Public Property Travel_Image() As String
		Get
			Return Me._Travel_Image
		End Get
		Set
			If (String.Equals(Me._Travel_Image, value) = false) Then
				Me.OnTravel_ImageChanging(value)
				Me.SendPropertyChanging
				Me._Travel_Image = value
				Me.SendPropertyChanged("Travel_Image")
				Me.OnTravel_ImageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Travel_Slide", DbType:="NVarChar(MAX)")>  _
	Public Property Travel_Slide() As String
		Get
			Return Me._Travel_Slide
		End Get
		Set
			If (String.Equals(Me._Travel_Slide, value) = false) Then
				Me.OnTravel_SlideChanging(value)
				Me.SendPropertyChanging
				Me._Travel_Slide = value
				Me.SendPropertyChanged("Travel_Slide")
				Me.OnTravel_SlideChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Home_History")>  _
Partial Public Class Home_History
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _History_Id As Integer
	
	Private _History_Form As String
	
	Private _History_Date As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnHistory_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnHistory_IdChanged()
    End Sub
    Partial Private Sub OnHistory_FormChanging(value As String)
    End Sub
    Partial Private Sub OnHistory_FormChanged()
    End Sub
    Partial Private Sub OnHistory_DateChanging(value As String)
    End Sub
    Partial Private Sub OnHistory_DateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_History_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property History_Id() As Integer
		Get
			Return Me._History_Id
		End Get
		Set
			If ((Me._History_Id = value)  _
						= false) Then
				Me.OnHistory_IdChanging(value)
				Me.SendPropertyChanging
				Me._History_Id = value
				Me.SendPropertyChanged("History_Id")
				Me.OnHistory_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_History_Form", DbType:="NVarChar(50)")>  _
	Public Property History_Form() As String
		Get
			Return Me._History_Form
		End Get
		Set
			If (String.Equals(Me._History_Form, value) = false) Then
				Me.OnHistory_FormChanging(value)
				Me.SendPropertyChanging
				Me._History_Form = value
				Me.SendPropertyChanged("History_Form")
				Me.OnHistory_FormChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_History_Date", DbType:="NVarChar(50)")>  _
	Public Property History_Date() As String
		Get
			Return Me._History_Date
		End Get
		Set
			If (String.Equals(Me._History_Date, value) = false) Then
				Me.OnHistory_DateChanging(value)
				Me.SendPropertyChanging
				Me._History_Date = value
				Me.SendPropertyChanged("History_Date")
				Me.OnHistory_DateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Home_Product")>  _
Partial Public Class Home_Product
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Product_ID As Integer
	
	Private _Product_Name As String
	
	Private _Product_Details As String
	
	Private _Product_Image As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProduct_IDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProduct_IDChanged()
    End Sub
    Partial Private Sub OnProduct_NameChanging(value As String)
    End Sub
    Partial Private Sub OnProduct_NameChanged()
    End Sub
    Partial Private Sub OnProduct_DetailsChanging(value As String)
    End Sub
    Partial Private Sub OnProduct_DetailsChanged()
    End Sub
    Partial Private Sub OnProduct_ImageChanging(value As String)
    End Sub
    Partial Private Sub OnProduct_ImageChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Product_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Product_ID() As Integer
		Get
			Return Me._Product_ID
		End Get
		Set
			If ((Me._Product_ID = value)  _
						= false) Then
				Me.OnProduct_IDChanging(value)
				Me.SendPropertyChanging
				Me._Product_ID = value
				Me.SendPropertyChanged("Product_ID")
				Me.OnProduct_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Product_Name", DbType:="NVarChar(50)")>  _
	Public Property Product_Name() As String
		Get
			Return Me._Product_Name
		End Get
		Set
			If (String.Equals(Me._Product_Name, value) = false) Then
				Me.OnProduct_NameChanging(value)
				Me.SendPropertyChanging
				Me._Product_Name = value
				Me.SendPropertyChanged("Product_Name")
				Me.OnProduct_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Product_Details", DbType:="NVarChar(MAX)")>  _
	Public Property Product_Details() As String
		Get
			Return Me._Product_Details
		End Get
		Set
			If (String.Equals(Me._Product_Details, value) = false) Then
				Me.OnProduct_DetailsChanging(value)
				Me.SendPropertyChanging
				Me._Product_Details = value
				Me.SendPropertyChanged("Product_Details")
				Me.OnProduct_DetailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Product_Image", DbType:="NVarChar(MAX)")>  _
	Public Property Product_Image() As String
		Get
			Return Me._Product_Image
		End Get
		Set
			If (String.Equals(Me._Product_Image, value) = false) Then
				Me.OnProduct_ImageChanging(value)
				Me.SendPropertyChanging
				Me._Product_Image = value
				Me.SendPropertyChanged("Product_Image")
				Me.OnProduct_ImageChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
